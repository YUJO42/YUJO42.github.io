{"componentChunkName":"component---src-templates-blog-post-js","path":"/우아한테크코스/[우테코]레벨1-계산기미션/","result":{"data":{"site":{"siteMetadata":{"title":"yujolog","author":"yujo","siteUrl":"https://yujo11.github.io","comment":{"disqusShortName":"yujolog","utterances":"yujo11/yujo11.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"bfeefe63-8bf4-58b3-8b8a-92169d07fe26","excerpt":"계산기 미션 어제 진행한 cypress 초간단 미션에 이어 오늘은 계산기 미션을 진행했습니다. 이번 미션 역시 에 적응하기 위한 미션이었습니다. 많은 기능이 들어가지 않는 계산기라 기능 구현은 간단했으나 오늘도 역시 테스트코드를 작성하기 위해 많은 시간을 들였습니다. 어제 페어인 하루와 같이 삽질을 하면서 여러 시행착오를 겪은 덕분에 의 기본 동작을 위해 필요한 , , 등의 메서드를 알고 있는 상태에서 미션을 진행했습니다. TDD…","html":"<div markdown=\"1\">\n<p align=\"middle\">\n  <img width=\"300\" src=\"https://techcourse-storage.s3.ap-northeast-2.amazonaws.com/805329299a1a43c4850c410a545caf24\">\n</p>\n</div>\n<h3 id=\"계산기-미션\" style=\"position:relative;\"><a href=\"#%EA%B3%84%EC%82%B0%EA%B8%B0-%EB%AF%B8%EC%85%98\" aria-label=\"계산기 미션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>계산기 미션</h3>\n<p>어제 진행한 cypress 초간단 미션에 이어 오늘은 계산기 미션을 진행했습니다. 이번 미션 역시 <code class=\"language-text\">cypress</code>에 적응하기 위한 미션이었습니다. 많은 기능이 들어가지 않는 계산기라 기능 구현은 간단했으나 오늘도 역시 테스트코드를 작성하기 위해 많은 시간을 들였습니다.</p>\n<p>어제 페어인 <a href=\"https://github.com/365kim\">하루</a>와 같이 삽질을 하면서 여러 시행착오를 겪은 덕분에 <code class=\"language-text\">cypress</code>의 기본 동작을 위해 필요한 <code class=\"language-text\">describe</code>, <code class=\"language-text\">it</code>, <code class=\"language-text\">cy</code>등의 메서드를 알고 있는 상태에서 미션을 진행했습니다.</p>\n<p>TDD를 연습하기 위한 미션이었기 때문에 어제와 동일하게 테스트 코드를 먼저 작성한 후에 기능을 구현했습니다.</p>\n<h3 id=\"cypress로-특정-값을-가진-요소에-클릭-유도하기\" style=\"position:relative;\"><a href=\"#cypress%EB%A1%9C-%ED%8A%B9%EC%A0%95-%EA%B0%92%EC%9D%84-%EA%B0%80%EC%A7%84-%EC%9A%94%EC%86%8C%EC%97%90-%ED%81%B4%EB%A6%AD-%EC%9C%A0%EB%8F%84%ED%95%98%EA%B8%B0\" aria-label=\"cypress로 특정 값을 가진 요소에 클릭 유도하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cypress로 특정 값을 가진 요소에 클릭 유도하기</h3>\n<p>테스트 코드 작성을 시작하면서 처음부터 헤맸습니다. 어제 구현한 테스트 코드의 경우 특정 id나 class를 가진 단일 요소를 클릭하면 되는 경우였지만 오늘 구현한 테스트 코드의 경우 단일 요소가 아닌 파싱한 요소의 하위 노드가 클릭 됐을 때 해당 값이 표시되는지 확인을 해야했습니다.</p>\n<p>저희는 이 때 <code class=\"language-text\">cy.contains()</code> 메서드를 활용하여 다음과 같이 특정 value를 포함한 node에 클릭을 유도했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#total'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">display</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> displayText <span class=\"token operator\">=</span> display<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;-- contains() 메서드 사용</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#total'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'have.text'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"cypress로-alert-검증하기\" style=\"position:relative;\"><a href=\"#cypress%EB%A1%9C-alert-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0\" aria-label=\"cypress로 alert 검증하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cypress로 alert 검증하기</h3>\n<p>이번 미션을 진행하면서 가장 많이 헤맨 부분이 바로 이 <code class=\"language-text\">alert</code>를 검증하는 부분이었습니다. 처음 <code class=\"language-text\">cy.on()</code>메서드를 통해 해결하려 했으나 <code class=\"language-text\">cy.on()</code>메서드의 경우 해당 이벤트가 발생했을 경우에만 실행이 되는 테스트코드이기 때문에 <code class=\"language-text\">alert</code>가 발생하지 않은 경우에는 아예 실행되지 않으면서 해당 단락을 건너뛰는 치명적인 문제가 있었습니다.</p>\n<p>그 다음으로 시도한 방법이 <code class=\"language-text\">stub()</code>메서드를 활용하는 방법이었습니다. 먼저 <code class=\"language-text\">stub()</code> 메서드를 활용해 아래와 같은 코드를 작성했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'네자리 이상의 숫자가 입력됐을 경우 경고메세지가 뜬다.'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stub <span class=\"token operator\">=</span> cy<span class=\"token punctuation\">.</span><span class=\"token function\">stub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'window:alert'</span><span class=\"token punctuation\">,</span> stub<span class=\"token punctuation\">)</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#total'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.digits'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.digits'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>stub<span class=\"token punctuation\">.</span><span class=\"token function\">getCall</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">calledWith</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">'숫자는 세 자리까지만 입력 가능합니다!'</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#total'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'have.text'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'111/111'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">sutb()</code>메서드를 사용해 <code class=\"language-text\">const stub = cy.stub();</code> 변수를 선언하고 <code class=\"language-text\">cy.on(&#39;window:alert`, stub);</code>을 작성해 <code class=\"language-text\">alert</code>가 발생할 경우 해당 <code class=\"language-text\">alert</code>의 내용을 <code class=\"language-text\">stub</code>에 담아줬습니다. 이후 <code class=\"language-text\">cy.get()</code>에 콜백으로 <code class=\"language-text\">alert</code>가 발생할 상황을 유도하고 해당 값에 원하는 텍스트가 있는지 확인하는 방식으로 문제를 해결할 수 있었습니다.</p>\n<p>일단 해결은 됐지만 이 방법이 best pracitce가 아닐거라는 생각이 많이 들었습니다. 위 방법을 사용하면 <code class=\"language-text\">stub</code>에 쌓인 <code class=\"language-text\">callstack</code>에 매직넘버를 통해 접근해야 하는데 이런 방법보다 더 우아한 방법이 있을거라고 생각했지만 아쉽게도 다른 방법을 찾지 못 했습니다.</p>\n<p>다른 크루들의 코드를 보면서 보다 우아한 해결방법이 있는지 찾아봐야겠습니다.</p>\n<h4 id=\"전체-코드-확인--링크\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C-%ED%99%95%EC%9D%B8--%EB%A7%81%ED%81%AC\" aria-label=\"전체 코드 확인  링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드 확인 : <a href=\"https://github.com/YUJO42/javascript-calculator/tree/yujo\">링크</a></h4>","frontmatter":{"title":"[우테코]레벨1 계산기 미션 후기","date":"February 04, 2021"}}},"pageContext":{"slug":"/우아한테크코스/[우테코]레벨1-계산기미션/","previous":{"fields":{"slug":"/우아한테크코스/[우테코]레벨1-cypress사용해보기/"},"frontmatter":{"title":"[우테코]레벨 1 cypress 사용해보기(초간단 미션)","category":"우아한 테크코스","draft":false}},"next":{"fields":{"slug":"/우아한테크코스/[우테코]레벨1-자동차경주-step1/"},"frontmatter":{"title":"[우테코]레벨1 자동차 경주 게임 step1 후기","category":"우아한 테크코스","draft":false}}}},"staticQueryHashes":["1282858476","3128451518"]}