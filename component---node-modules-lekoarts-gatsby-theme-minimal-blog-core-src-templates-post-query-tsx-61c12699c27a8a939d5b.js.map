{"version":3,"sources":["webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray/index.js","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx"],"names":["MDXRenderer","require","module","ItemTags","tags","useMinimalBlogConfig","tagsPath","basePath","Fragment","map","tag","i","key","slug","as","Link","to","replaceSlashes","name","React","mdx","useMDXScope","scope","children","props","mdxScope","End","fullScope","keys","Object","values","fn","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","exports","arr","__esModule","shadow","v","Post","post","data","title","description","excerpt","image","banner","childImageSharp","resize","src","undefined","pathname","canonicalUrl","variant","sx","color","mt","a","fontSize","date","timeToRead","my","boxShadow","join","body","PostComponent"],"mappings":"gFAMA,IAAMA,EAAcC,EAApB,QAEAC,UAAiB,CACfF,YAAaA,I,kCCTf,yEA8BeG,IAjBE,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,KAAsB,EACTC,cAAvBC,EADgC,EAChCA,SAAUC,EADsB,EACtBA,SAElB,OACE,kBAAC,IAAMC,SAAP,KACGJ,EAAKK,KAAI,SAACC,EAAKC,GAAN,OACR,kBAAC,IAAMH,SAAP,CAAgBI,IAAKF,EAAIG,QACpBF,GAAF,KACD,kBAAC,IAAD,CAAOG,GAAIC,OAAMC,GAAIC,YAAe,IAAIV,EAAL,IAAiBD,EAAjB,IAA6BI,EAAIG,OACjEH,EAAIQ,a,woBCtBjB,IAAMC,EAAQlB,EAAd,QACQmB,EAAQnB,EAAQ,QAAhBmB,IACAC,EAAgBpB,EAAQ,QAAxBoB,YAERnB,UAAiB,SAAqB,GAIlC,IAHFoB,EAGC,EAHDA,MACAC,EAEC,EAFDA,SACGC,EACF,0BACKC,EAAWJ,EADhB,GAIKK,EAAMP,EAAA,SAAc,WACxB,MACE,OAAO,KAGT,IAAMQ,EAAS,GAGbR,MAHa,EAIbC,OAJF,GAQMQ,EAAOC,YAAb,GACMC,EAASF,EAAA,KAAS,SAAAhB,GAAG,OAAIe,EAAJ,MAG3B,OAFQ,mCAAR,KAEOI,2BAAP,OACC,CAACR,EAlBJ,IAoBA,OAAOJ,uBAAP,M,qBChCF,IAAIa,EAAoB,EAAQ,QAE5BC,EAAkB,EAAQ,QAE1BC,EAA6B,EAAQ,QAErCC,EAAoB,EAAQ,QAMhCjC,EAAOkC,QAJP,SAA4BC,GAC1B,OAAOL,EAAkBK,IAAQJ,EAAgBI,IAAQH,EAA2BG,IAAQF,KAI9FjC,EAAOkC,QAAiB,QAAIlC,EAAOkC,QAASlC,EAAOkC,QAAQE,YAAa,G,0ICsBlEC,EADK,CAAC,OAAD,oBACO9B,KAAI,SAAC+B,GAAD,iCAAkCA,EAAlC,IAAuCA,EAAvC,UAqCPC,EAnCF,SAAC,GAAD,IAAWC,EAAX,EAAGC,KAAQD,KAAX,OACX,YAAC,IAAD,KACE,YAAC,IAAD,CACEE,MAAOF,EAAKE,MACZC,YAAaH,EAAKG,YAAcH,EAAKG,YAAcH,EAAKI,QACxDC,MAAOL,EAAKM,OAASN,EAAKM,OAAOC,gBAAgBC,OAAOC,SAAMC,EAC9DC,SAAUX,EAAK7B,KACfyC,aAAcZ,EAAKY,eAErB,YAAC,IAAD,CAASxC,GAAG,KAAKyC,QAAQ,aACtBb,EAAKE,OAER,iBAAGY,GAAI,CAAEC,MAAO,YAAaC,GAAI,EAAGC,EAAG,CAAEF,MAAO,aAAeG,SAAU,CAAC,EAAG,EAAG,KAC9E,wBAAOlB,EAAKmB,MACXnB,EAAKtC,MACJ,YAAC,IAAMI,SAAP,WAEE,YAAC,IAAD,CAAUJ,KAAMsC,EAAKtC,QAGxBsC,EAAKoB,YAAL,MACApB,EAAKoB,YAAc,wBAAOpB,EAAKoB,WAAZ,cAEtB,uBACEN,GAAI,CACFO,GAAI,EACJ,6BAA8B,CAAEA,GAAI,CAAC,EAAG,EAAG,GAAIC,UAAWzB,EAAO0B,KAAP,OAC1DV,QAAS,mBAGX,YAAC,cAAD,KAAcb,EAAKwB,SChEVC,UCQA,YAAkD,IAAhB3C,EAAgB,oBAC/D,OAAO,kBAAC,EAASA","file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-61c12699c27a8a939d5b.js","sourcesContent":["/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","import React from \"react\"\nimport { Link as TLink } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <TLink as={Link} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </TLink>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","const React = require(`react`)\nconst { mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  children,\n  ...props\n}) {\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, {...props })\n}\n","var arrayWithoutHoles = require(\"@babel/runtime/helpers/arrayWithoutHoles\");\n\nvar iterableToArray = require(\"@babel/runtime/helpers/iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"@babel/runtime/helpers/unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"@babel/runtime/helpers/nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","/** @jsx jsx */\nimport { jsx, Heading } from \"theme-ui\"\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\nimport React from \"react\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport SEO from \"./seo\"\n\ntype PostProps = {\n  data: {\n    post: {\n      slug: string\n      title: string\n      date: string\n      tags?: {\n        name: string\n        slug: string\n      }[]\n      description?: string\n      canonicalUrl?: string\n      body: string\n      excerpt: string\n      timeToRead?: number\n      banner?: {\n        childImageSharp: {\n          resize: {\n            src: string\n          }\n        }\n      }\n    }\n  }\n}\n\nconst px = [`32px`, `16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.15) 0px ${v} ${v} 0px`)\n\nconst Post = ({ data: { post } }: PostProps) => (\n  <Layout>\n    <SEO\n      title={post.title}\n      description={post.description ? post.description : post.excerpt}\n      image={post.banner ? post.banner.childImageSharp.resize.src : undefined}\n      pathname={post.slug}\n      canonicalUrl={post.canonicalUrl}\n    />\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": { my: [4, 4, 5], boxShadow: shadow.join(`, `) },\n        variant: `layout.content`,\n      }}\n    >\n      <MDXRenderer>{post.body}</MDXRenderer>\n    </section>\n  </Layout>\n)\n\nexport default Post\n","import { graphql } from \"gatsby\"\nimport PostComponent from \"../components/post\"\n\nexport default PostComponent\n\nexport const query = graphql`\n  query($slug: String!, $formatString: String!) {\n    post(slug: { eq: $slug }) {\n      slug\n      title\n      date(formatString: $formatString)\n      tags {\n        name\n        slug\n      }\n      description\n      canonicalUrl\n      body\n      excerpt\n      timeToRead\n      banner {\n        childImageSharp {\n          resize(width: 1200, quality: 90) {\n            src\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport Post from \"../../../components/post\"\n\ntype Props = {\n  data: {\n    post: any\n    [key: string]: any\n  }\n  [key: string]: any\n}\n\nexport default function MinimalBlogCorePost({ ...props }: Props) {\n  return <Post {...props} />\n}\n"],"sourceRoot":""}